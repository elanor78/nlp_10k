# -*- coding: utf-8 -*-
"""part1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DSB_OknLFJeHKGmr3wC_HFE7ICV_x919
"""
import streamlit as st
import json
import os
import pandas as pd
import numpy as np
from transformers import pipeline
import plotly.express as px
import plotly.graph_objects as go

# Load sentiment analysis pipeline
sentiment_pipeline = pipeline("sentiment-analysis", model="yiyanghkust/finbert-tone")

# Sentiment Analysis Function
def analyze_sentiment(text):
    result = sentiment_pipeline(text)[0]
    if result['label'] == 'positive':
        return result['score']
    return 0

# Function to extract data from JSON files
def extract_all_json_content(folder_path):
    extracted_content = []
    for file_name in os.listdir(folder_path):
        if file_name.endswith(".json"):
            file_path = os.path.join(folder_path, file_name)
            with open(file_path, 'r') as f:
                content = json.load(f)
                extracted_content.append(content)
    return extracted_content

# Main Streamlit App
st.title("EDGAR 10-K Filings Sentiment Analysis")

ticker = st.text_input("Enter Ticker Symbol:")
year = st.number_input("Enter Start Year:", min_value=2000, max_value=2025, step=1)

if st.button("Analyze"):
    if ticker and year:
        folder_path = f"edgar-crawler/datasets/EXTRACTED_FILINGS/10-K"
        data = extract_all_json_content(folder_path)
        
        company_dfs = {}
        for report in data:
            company_name = report.get('company', 'Unknown')
            report_year = report.get('year', 'Unknown')
            if company_name not in company_dfs:
                company_dfs[company_name] = pd.DataFrame(columns=['year'] + [f'item_{i}' for i in range(1, 17)])
            row = {'year': report_year}
            for item in range(1, 17):
                item_key = f'item_{item}'
                if item_key in report:
                    row[item_key] = analyze_sentiment(report[item_key])
                else:
                    row[item_key] = None
            company_dfs[company_name] = pd.concat([company_dfs[company_name], pd.DataFrame([row])], ignore_index=True)
        
        for company, df in company_dfs.items():
            st.subheader(f"Sentiment Scores for {company}")
            st.dataframe(df)
            df['Average'] = df.mean(axis=1)
            fig = px.line(df, x='year', y='Average', title=f"Sentiment Over Time for {company}")
            st.plotly_chart(fig)

            # Show descriptive statistics
            st.subheader("Descriptive Statistics")
            st.write(df.describe())

            # Correlation Matrix
            st.subheader("Correlation Matrix")
            corr_matrix = df.corr()
            fig_corr = go.Figure(data=go.Heatmap(z=corr_matrix.values, x=corr_matrix.columns, y=corr_matrix.columns, colorscale='Viridis'))
            st.plotly_chart(fig_corr)
    else:
        st.error("Please enter both Ticker Symbol and Start Year.")

