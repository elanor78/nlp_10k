# -*- coding: utf-8 -*-
"""part1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DSB_OknLFJeHKGmr3wC_HFE7ICV_x919
"""

!pip install streamlit
import streamlit as st
import json
import subprocess
import os
import pandas as pd
import numpy as np
from transformers import AutoTokenizer, AutoModelForSequenceClassification
import plotly.express as px

# Load FinBERT model and tokenizer
model_name = "yiyanghkust/finbert-tone"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForSequenceClassification.from_pretrained(model_name)

# Sentiment Analysis Function
def analyze_sentiment(text):
    inputs = tokenizer(text, max_length=512, truncation=True, return_tensors="pt")
    outputs = model(**inputs)
    logits = outputs.logits.detach().numpy()[0]
    exp_logits = np.exp(logits)
    probabilities = exp_logits / np.sum(exp_logits)
    return probabilities

# Function to extract data from JSON files
def extract_all_json_content(folder_path):
    extracted_content = []
    for file_name in os.listdir(folder_path):
        if file_name.endswith(".json"):
            file_path = os.path.join(folder_path, file_name)
            with open(file_path, 'r') as f:
                content = json.load(f)
                extracted_content.append(content)
    return extracted_content

# Main Streamlit App
st.title("EDGAR 10-K Filings Sentiment Analysis")

ticker = st.text_input("Enter Ticker Symbol:")
year = st.number_input("Enter Start Year:", min_value=2000, max_value=2025, step=1)

if st.button("Analyze"):
    if ticker and year:
        # Assuming data is already downloaded and extracted in 'EXTRACTED_FILINGS'
        folder_path = f"edgar-crawler/datasets/EXTRACTED_FILINGS/10-K"
        data = extract_all_json_content(folder_path)

        company_dfs = {}
        for report in data:
            company_name = report.get('company', 'Unknown')
            report_year = report.get('year', 'Unknown')
            if company_name not in company_dfs:
                company_dfs[company_name] = pd.DataFrame(columns=['year'] + [f'item_{i}' for i in range(1, 17)])
            row = {'year': report_year}
            for item in range(1, 17):
                item_key = f'item_{item}'
                if item_key in report:
                    rating = analyze_sentiment(report[item_key])[1]  # Positive sentiment
                    row[item_key] = rating
                else:
                    row[item_key] = None
            company_dfs[company_name] = pd.concat([company_dfs[company_name], pd.DataFrame([row])], ignore_index=True)

        for company, df in company_dfs.items():
            st.subheader(f"Sentiment Scores for {company}")
            st.dataframe(df)
            df['Average'] = df.mean(axis=1)
            fig = px.line(df, x='year', y='Average', title=f"Sentiment Over Time for {company}")
            st.plotly_chart(fig)
    else:
        st.error("Please enter both Ticker Symbol and Start Year.")

